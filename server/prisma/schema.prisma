generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  orders    Order[]
  cart      Cart?
}

// Product model
model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Decimal
  sku         String        @unique
  status      ProductStatus
  categoryId  String
  vendorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id])
  vendor      User          @relation(fields: [vendorId], references: [id])
  inventory   Inventory?
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

// Category model
model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

// Inventory model
model Inventory {
  id          String             @id @default(uuid())
  productId   String             @unique
  stock       Int
  minStock    Int?
  restockDate DateTime?
  product     Product            @relation(fields: [productId], references: [id])
  history     InventoryHistory[]
}

// Inventory History model
model InventoryHistory {
  id             String     @id @default(uuid())
  inventoryId    String
  action         ActionType
  quantityChange Int
  previousStock  Int
  newStock       Int
  createdAt      DateTime   @default(now())
  inventory      Inventory  @relation(fields: [inventoryId], references: [id])
}

// Order model
model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Decimal
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

// OrderItem model
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Cart model
model Cart {
  id     String     @id @default(uuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

// CartItem model
model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum ActionType {
  IN
  OUT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
